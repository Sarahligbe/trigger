name: Test

on:
  workflow_dispatch:

jobs:
  trigger-cypress-tests:
      name: "Trigger Cypress Tests in Separate Repository"
      runs-on: ubuntu-latest
      steps:
        - name: Generate Unique ID
          id: generate-id
          run: |
            UNIQUE_ID="PR-${{ github.event.pull_request.number }}-$(date +%s)"
            echo "unique_id=$UNIQUE_ID" >> $GITHUB_OUTPUT
        - name: Trigger Cypress Tests
          run: |
            response=$(curl -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.CYPRESS_TRIGGER_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{"event_type": "run-cypress-tests", "client_payload": { "pr_number": "${{ github.event.pull_request.number }}", "branch": "${{ github.head_ref }}", "unique_id": "${{ steps.generate-id.outputs.unique_id }}" }}' \
              https://api.github.com/repos/sarahligbe/kubernetes-cluster/dispatches)

        - name: Wait for status
          run: |
            elapsed_time=0
            check_interval_seconds=120
            max_wait_minutes=30
            unique_id="${{ steps.generate-id.outputs.unique_id }}"

            while true; do
              # Fetch all workflow runs for the repository_dispatch event
              response=$(curl -s -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ secrets.CYPRESS_TRIGGER_TOKEN }}" \
                "https://api.github.com/repos/sarahligbe/kubernetes-cluster/actions/runs?event=repository_dispatch")

              # Extract run IDs
              run_ids=$(echo "$response" | jq -r '.workflow_runs[] | .id')

              if [ -z "$run_ids" ]; then
                echo "No workflow runs found. Retrying..."
                sleep $check_interval_seconds
                elapsed_time=$((elapsed_time + check_interval_seconds))
                continue
              fi

              # Loop through run IDs to fetch jobs
              for run_id in $run_ids; do
                jobs_response=$(curl -s -H "Accept: application/vnd.github+json" \
                  -H "Authorization: Bearer ${{ secrets.CYPRESS_TRIGGER_TOKEN }}" \
                  "https://api.github.com/repos/sarahligbe/kubernetes-cluster/actions/runs/$run_id/jobs")

                # Check if any step name in the jobs contains the unique ID
                matching_step=$(echo "$jobs_response" | jq -r \
                  --arg unique_id "$unique_id" \
                  '.jobs[].steps[] | select(.name | contains($unique_id))')

                if [ -n "$matching_step" ]; then
                  step_status=$(echo "$matching_step" | jq -r '.status')
                  step_conclusion=$(echo "$matching_step" | jq -r '.conclusion')

                  echo "Found matching step with unique ID: $unique_id"
                  echo "Step Status: $step_status, Conclusion: $step_conclusion"

                  if [ "$step_status" = "completed" ]; then
                    if [ "$step_conclusion" = "success" ]; then
                      echo "Cypress tests completed successfully."
                      exit 0
                    else
                      echo "Cypress tests failed with conclusion: $step_conclusion."
                      exit 1
                    fi
                  fi
                fi
              done

              if [ "$elapsed_time" -ge "$((max_wait_minutes * 60))" ]; then
                echo "Timeout reached after $max_wait_minutes minutes."
                exit 1
              fi

              echo "Waiting for workflows to complete..."
              sleep $check_interval_seconds
              elapsed_time=$((elapsed_time + check_interval_seconds))
            done

  build:
      name: "build"
      runs-on: ubuntu-latest
      needs: trigger-cypress-tests
      steps:
        - name: build
          run: |
            echo "cypress was a success"